<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locationcamera/adapter/PhotoAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locationcamera/adapter/PhotoAdapter.java" />
              <option name="originalContent" value="package com.example.locationcamera.adapter;&#10;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.engine.DiskCacheStrategy;&#10;import com.example.locationcamera.R;&#10;import com.example.locationcamera.model.PhotoLocation;&#10;import java.io.File;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class PhotoAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {&#10;&#10;    private static final String TAG = &quot;PhotoAdapter&quot;;&#10;    private List&lt;PhotoLocation&gt; photoList;&#10;    private OnPhotoClickListener listener;&#10;&#10;    private boolean isGrouped = false;&#10;    private Map&lt;String, List&lt;PhotoLocation&gt;&gt; groupedPhotos;&#10;    private Map&lt;String, String&gt; folderNames;&#10;    private List&lt;String&gt; folderOrder = new ArrayList&lt;&gt;();&#10;    private RenameFolderListener renameFolderListener;&#10;&#10;    public interface OnPhotoClickListener {&#10;        void onPhotoClick(PhotoLocation photo);&#10;    }&#10;&#10;    public interface RenameFolderListener {&#10;        void onRenameFolder(String folderPath);&#10;    }&#10;&#10;    public PhotoAdapter(List&lt;PhotoLocation&gt; photoList, OnPhotoClickListener listener) {&#10;        this.photoList = photoList;&#10;        this.listener = listener;&#10;        Log.d(TAG, &quot;PhotoAdapter created with &quot; + (photoList != null ? photoList.size() : 0) + &quot; photos&quot;);&#10;    }&#10;&#10;    public void setGroupedData(Map&lt;String, List&lt;PhotoLocation&gt;&gt; groupedPhotos, Map&lt;String, String&gt; folderNames, RenameFolderListener renameFolderListener) {&#10;        this.isGrouped = true;&#10;        this.groupedPhotos = groupedPhotos;&#10;        this.folderNames = folderNames;&#10;        this.folderOrder.clear();&#10;        this.folderOrder.addAll(groupedPhotos.keySet());&#10;        this.renameFolderListener = renameFolderListener;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void setUngroupedData(List&lt;PhotoLocation&gt; photoList) {&#10;        this.isGrouped = false;&#10;        this.photoList = photoList;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        try {&#10;            View view = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_photo, parent, false);&#10;            return new PhotoViewHolder(view);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error creating view holder&quot;, e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {&#10;        try {&#10;            if (isGrouped &amp;&amp; groupedPhotos != null) {&#10;                String folderPath = folderOrder.get(position);&#10;                List&lt;PhotoLocation&gt; photos = groupedPhotos.get(folderPath);&#10;                PhotoLocation firstPhoto = photos.get(0);&#10;&#10;                GroupedPhotoViewHolder groupedHolder = (GroupedPhotoViewHolder) holder;&#10;                String photoPath = firstPhoto.getPhotoPath();&#10;                File photoFile = new File(photoPath);&#10;                Glide.with(holder.itemView.getContext())&#10;                        .load(photoFile)&#10;                        .centerCrop()&#10;                        .diskCacheStrategy(DiskCacheStrategy.ALL)&#10;                        .placeholder(R.drawable.ic_image_placeholder)&#10;                        .error(R.drawable.ic_image_error)&#10;                        .into(groupedHolder.imageView);&#10;&#10;                String albumName = folderNames != null &amp;&amp; folderNames.containsKey(folderPath)&#10;                        ? folderNames.get(folderPath)&#10;                        : folderPath;&#10;                groupedHolder.albumName.setText(albumName);&#10;                groupedHolder.albumName.setVisibility(View.VISIBLE); // Show album name when grouped&#10;&#10;                groupedHolder.renameButton.setOnClickListener(v -&gt; {&#10;                    if (renameFolderListener != null) {&#10;                        renameFolderListener.onRenameFolder(folderPath);&#10;                    }&#10;                });&#10;&#10;            } else {&#10;                if (photoList == null || position &gt;= photoList.size()) {&#10;                    Log.w(TAG, &quot;Invalid position or null photo list&quot;);&#10;                    return;&#10;                }&#10;&#10;                PhotoLocation photo = photoList.get(position);&#10;                if (photo == null) {&#10;                    Log.w(TAG, &quot;Photo at position &quot; + position + &quot; is null&quot;);&#10;                    return;&#10;                }&#10;&#10;                PhotoViewHolder photoHolder = (PhotoViewHolder) holder;&#10;                String photoPath = photo.getPhotoPath();&#10;                if (photoPath != null &amp;&amp; !photoPath.isEmpty()) {&#10;                    File photoFile = new File(photoPath);&#10;                    if (photoFile.exists()) {&#10;                        Glide.with(holder.itemView.getContext())&#10;                                .load(photoFile)&#10;                                .centerCrop()&#10;                                .diskCacheStrategy(DiskCacheStrategy.ALL)&#10;                                .placeholder(R.drawable.ic_image_placeholder)&#10;                                .error(R.drawable.ic_image_error)&#10;                                .into(photoHolder.imageView);&#10;                    } else {&#10;                        photoHolder.imageView.setImageResource(R.drawable.ic_image_error);&#10;                    }&#10;                } else {&#10;                    photoHolder.imageView.setImageResource(R.drawable.ic_image_error);&#10;                }&#10;&#10;                if (photoHolder.locationIndicator != null) {&#10;                    if (photo.getLatitude() != 0 &amp;&amp; photo.getLongitude() != 0) {&#10;                        photoHolder.locationIndicator.setVisibility(View.VISIBLE);&#10;                    } else {&#10;                        photoHolder.locationIndicator.setVisibility(View.GONE);&#10;                    }&#10;                }&#10;&#10;                photoHolder.itemView.setOnClickListener(v -&gt; {&#10;                    if (listener != null) {&#10;                        listener.onPhotoClick(photo);&#10;                    }&#10;                });&#10;&#10;                // Hide album name and rename button when not grouped&#10;                if (holder instanceof GroupedPhotoViewHolder) {&#10;                    GroupedPhotoViewHolder groupedHolder = (GroupedPhotoViewHolder) holder;&#10;                    groupedHolder.albumName.setVisibility(View.GONE);&#10;                    groupedHolder.renameButton.setVisibility(View.GONE);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error binding view holder at position &quot; + position, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        if (isGrouped &amp;&amp; groupedPhotos != null) {&#10;            return folderOrder.size();&#10;        }&#10;        return photoList != null ? photoList.size() : 0;&#10;    }&#10;&#10;    static class PhotoViewHolder extends RecyclerView.ViewHolder {&#10;        ImageView imageView;&#10;        ImageView locationIndicator;&#10;&#10;        PhotoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            try {&#10;                imageView = itemView.findViewById(R.id.photo_image);&#10;                locationIndicator = itemView.findViewById(R.id.location_indicator);&#10;&#10;                if (imageView == null) {&#10;                    Log.e(TAG, &quot;Photo ImageView not found in layout&quot;);&#10;                }&#10;                if (locationIndicator == null) {&#10;                    Log.e(TAG, &quot;Location indicator ImageView not found in layout&quot;);&#10;                }&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error initializing view holder&quot;, e);&#10;            }&#10;        }&#10;    }&#10;&#10;    static class GroupedPhotoViewHolder extends RecyclerView.ViewHolder {&#10;        ImageView imageView;&#10;        TextView albumName;&#10;        ImageView renameButton;&#10;&#10;        GroupedPhotoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            imageView = itemView.findViewById(R.id.photo_image);&#10;            albumName = itemView.findViewById(R.id.album_name);&#10;            renameButton = itemView.findViewById(R.id.rename_album_button);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.locationcamera.adapter;&#10;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.CheckBox;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.engine.DiskCacheStrategy;&#10;import com.example.locationcamera.R;&#10;import com.example.locationcamera.model.PhotoLocation;&#10;import java.io.File;&#10;import java.util.ArrayList;&#10;import java.util.HashSet;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Set;&#10;&#10;public class PhotoAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {&#10;&#10;    private static final String TAG = &quot;PhotoAdapter&quot;;&#10;    private List&lt;PhotoLocation&gt; photoList;&#10;    private OnPhotoClickListener listener;&#10;&#10;    private boolean isGrouped = false;&#10;    private Map&lt;String, List&lt;PhotoLocation&gt;&gt; groupedPhotos;&#10;    private Map&lt;String, String&gt; folderNames;&#10;    private List&lt;String&gt; folderOrder = new ArrayList&lt;&gt;();&#10;    private RenameFolderListener renameFolderListener;&#10;&#10;    private boolean isSelectionMode = false; // Track if selection mode is active&#10;    private Set&lt;PhotoLocation&gt; selectedPhotos = new HashSet&lt;&gt;(); // Track selected photos&#10;&#10;    public interface OnPhotoClickListener {&#10;        void onPhotoClick(PhotoLocation photo);&#10;    }&#10;&#10;    public interface RenameFolderListener {&#10;        void onRenameFolder(String folderPath);&#10;    }&#10;&#10;    public PhotoAdapter(List&lt;PhotoLocation&gt; photoList, OnPhotoClickListener listener) {&#10;        this.photoList = photoList;&#10;        this.listener = listener;&#10;        Log.d(TAG, &quot;PhotoAdapter created with &quot; + (photoList != null ? photoList.size() : 0) + &quot; photos&quot;);&#10;    }&#10;&#10;    public void setGroupedData(Map&lt;String, List&lt;PhotoLocation&gt;&gt; groupedPhotos, Map&lt;String, String&gt; folderNames, RenameFolderListener renameFolderListener) {&#10;        this.isGrouped = true;&#10;        this.groupedPhotos = groupedPhotos;&#10;        this.folderNames = folderNames;&#10;        this.folderOrder.clear();&#10;        this.folderOrder.addAll(groupedPhotos.keySet());&#10;        this.renameFolderListener = renameFolderListener;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void setUngroupedData(List&lt;PhotoLocation&gt; photoList) {&#10;        this.isGrouped = false;&#10;        this.photoList = photoList;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void enableSelectionMode(boolean enable) {&#10;        isSelectionMode = enable;&#10;        selectedPhotos.clear();&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public Set&lt;PhotoLocation&gt; getSelectedPhotos() {&#10;        return selectedPhotos;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        try {&#10;            View view = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_photo, parent, false);&#10;            return new PhotoViewHolder(view);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error creating view holder&quot;, e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {&#10;        try {&#10;            if (isGrouped &amp;&amp; groupedPhotos != null) {&#10;                String folderPath = folderOrder.get(position);&#10;                List&lt;PhotoLocation&gt; photos = groupedPhotos.get(folderPath);&#10;                PhotoLocation firstPhoto = photos.get(0);&#10;&#10;                GroupedPhotoViewHolder groupedHolder = (GroupedPhotoViewHolder) holder;&#10;                String photoPath = firstPhoto.getPhotoPath();&#10;                File photoFile = new File(photoPath);&#10;                Glide.with(holder.itemView.getContext())&#10;                        .load(photoFile)&#10;                        .centerCrop()&#10;                        .diskCacheStrategy(DiskCacheStrategy.ALL)&#10;                        .placeholder(R.drawable.ic_image_placeholder)&#10;                        .error(R.drawable.ic_image_error)&#10;                        .into(groupedHolder.imageView);&#10;&#10;                String albumName = folderNames != null &amp;&amp; folderNames.containsKey(folderPath)&#10;                        ? folderNames.get(folderPath)&#10;                        : folderPath;&#10;                groupedHolder.albumName.setText(albumName);&#10;                groupedHolder.albumName.setVisibility(View.VISIBLE); // Show album name when grouped&#10;&#10;                groupedHolder.renameButton.setOnClickListener(v -&gt; {&#10;                    if (renameFolderListener != null) {&#10;                        renameFolderListener.onRenameFolder(folderPath);&#10;                    }&#10;                });&#10;&#10;            } else {&#10;                if (photoList == null || position &gt;= photoList.size()) {&#10;                    Log.w(TAG, &quot;Invalid position or null photo list&quot;);&#10;                    return;&#10;                }&#10;&#10;                PhotoLocation photo = photoList.get(position);&#10;                if (photo == null) {&#10;                    Log.w(TAG, &quot;Photo at position &quot; + position + &quot; is null&quot;);&#10;                    return;&#10;                }&#10;&#10;                PhotoViewHolder photoHolder = (PhotoViewHolder) holder;&#10;                String photoPath = photo.getPhotoPath();&#10;                if (photoPath != null &amp;&amp; !photoPath.isEmpty()) {&#10;                    File photoFile = new File(photoPath);&#10;                    if (photoFile.exists()) {&#10;                        Glide.with(holder.itemView.getContext())&#10;                                .load(photoFile)&#10;                                .centerCrop()&#10;                                .diskCacheStrategy(DiskCacheStrategy.ALL)&#10;                                .placeholder(R.drawable.ic_image_placeholder)&#10;                                .error(R.drawable.ic_image_error)&#10;                                .into(photoHolder.imageView);&#10;                    } else {&#10;                        photoHolder.imageView.setImageResource(R.drawable.ic_image_error);&#10;                    }&#10;                } else {&#10;                    photoHolder.imageView.setImageResource(R.drawable.ic_image_error);&#10;                }&#10;&#10;                // Handle selection mode&#10;                if (isSelectionMode) {&#10;                    photoHolder.checkBox.setVisibility(View.VISIBLE);&#10;                    photoHolder.checkBox.setChecked(selectedPhotos.contains(photo));&#10;                    photoHolder.checkBox.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;                        if (isChecked) {&#10;                            selectedPhotos.add(photo);&#10;                        } else {&#10;                            selectedPhotos.remove(photo);&#10;                        }&#10;                    });&#10;                } else {&#10;                    photoHolder.checkBox.setVisibility(View.GONE);&#10;                }&#10;&#10;                photoHolder.itemView.setOnClickListener(v -&gt; {&#10;                    if (isSelectionMode) {&#10;                        photoHolder.checkBox.setChecked(!photoHolder.checkBox.isChecked());&#10;                    } else if (listener != null) {&#10;                        listener.onPhotoClick(photo);&#10;                    }&#10;                });&#10;&#10;                // Hide album name and rename button when not grouped&#10;                if (holder instanceof GroupedPhotoViewHolder) {&#10;                    GroupedPhotoViewHolder groupedHolder = (GroupedPhotoViewHolder) holder;&#10;                    groupedHolder.albumName.setVisibility(View.GONE);&#10;                    groupedHolder.renameButton.setVisibility(View.GONE);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error binding view holder at position &quot; + position, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        if (isGrouped &amp;&amp; groupedPhotos != null) {&#10;            return folderOrder.size();&#10;        }&#10;        return photoList != null ? photoList.size() : 0;&#10;    }&#10;&#10;    static class PhotoViewHolder extends RecyclerView.ViewHolder {&#10;        ImageView imageView;&#10;        ImageView locationIndicator;&#10;        CheckBox checkBox; // Add for selection&#10;&#10;        PhotoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            try {&#10;                imageView = itemView.findViewById(R.id.photo_image);&#10;                locationIndicator = itemView.findViewById(R.id.location_indicator);&#10;                checkBox = itemView.findViewById(R.id.photo_checkbox); // Add reference to checkbox&#10;&#10;                if (imageView == null) {&#10;                    Log.e(TAG, &quot;Photo ImageView not found in layout&quot;);&#10;                }&#10;                if (locationIndicator == null) {&#10;                    Log.e(TAG, &quot;Location indicator ImageView not found in layout&quot;);&#10;                }&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error initializing view holder&quot;, e);&#10;            }&#10;        }&#10;    }&#10;&#10;    static class GroupedPhotoViewHolder extends RecyclerView.ViewHolder {&#10;        ImageView imageView;&#10;        TextView albumName;&#10;        ImageView renameButton;&#10;&#10;        GroupedPhotoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            imageView = itemView.findViewById(R.id.photo_image);&#10;            albumName = itemView.findViewById(R.id.album_name);&#10;            renameButton = itemView.findViewById(R.id.rename_album_button);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M3,17.25V21h3.75L17.81,9.94l-3.75-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z&quot; /&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_photo.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_photo.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/photo_image&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:background=&quot;@color/gray&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;!-- Location Indicator --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/location_indicator&quot;&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:layout_margin=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/location_indicator_background&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            android:src=&quot;@drawable/ic_location&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:tint=&quot;@color/white&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/album_name&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Album Name&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/photo_image&quot; /&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/rename_album_button&quot;&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:src=&quot;@drawable/ic_edit&quot;&#10;            android:layout_gravity=&quot;end&quot;&#10;            android:contentDescription=&quot;Rename Album&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;@+id/album_name&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/photo_image&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:background=&quot;@color/gray&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;!-- Location Indicator --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/location_indicator&quot;&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:layout_margin=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/location_indicator_background&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            android:src=&quot;@drawable/ic_location&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:tint=&quot;@color/white&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/album_name&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Album Name&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/photo_image&quot; /&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/rename_album_button&quot;&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:src=&quot;@drawable/ic_edit&quot;&#10;            android:layout_gravity=&quot;end&quot;&#10;            android:contentDescription=&quot;Rename Album&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;@+id/album_name&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;CheckBox&#10;            android:id=&quot;@+id/photo_checkbox&quot;&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:layout_margin=&quot;8dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>